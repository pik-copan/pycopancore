name: release

on:
  push:
    branches: [main, master]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history and tags
        fetch-tags: true  # Ensure all tags are fetched for version resolution
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Detect version and tag
      id: version
      run: |
        echo "üîç Checking for version tags in this push to main/master..."
        
        # Debug: Show recent commits
        echo "Recent commits:"
        git log --oneline -5
        
        # Debug: Show all tags
        echo "All tags:"
        git tag -l | tail -10
        
        # Check if this push contains a commit with "Version" in the message
        # This indicates a release was created locally and pushed
        if git log --oneline -1 --grep="Version" | grep -q "Version"; then
          # Get the commit hash of the "Version" commit
          VERSION_COMMIT=$(git log --oneline -1 --grep="Version" --format="%H")
          echo "Found version commit: $VERSION_COMMIT"
          
          # Find tags that point to this specific commit
          TAGS_ON_COMMIT=$(git tag --points-at $VERSION_COMMIT | grep "^v" | head -1)
          
          if [ -n "$TAGS_ON_COMMIT" ]; then
            VERSION=${TAGS_ON_COMMIT#v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=$TAGS_ON_COMMIT" >> $GITHUB_OUTPUT
            echo "‚úÖ Version tag found for this commit: $TAGS_ON_COMMIT"
            
            # Additional verification: check if this is the most recent tag
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ "$LATEST_TAG" = "$TAGS_ON_COMMIT" ]; then
              echo "‚úÖ Confirmed: $TAGS_ON_COMMIT is the latest tag"
            else
              echo "‚ö†Ô∏è Warning: $TAGS_ON_COMMIT is not the latest tag (latest: $LATEST_TAG)"
              echo "This might indicate multiple tags in the same push"
            fi
          else
            echo "‚ö†Ô∏è Version commit found but no tag points to it"
            echo "Available tags:"
            git tag -l | tail -5
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        else
          echo "‚ö†Ô∏è No version commit found in this push"
          echo "Looking for any commit with 'Version' in the message..."
          git log --oneline --grep="Version" -10
          
          # Fallback: Check if there's a recent tag that might be from this push
          echo "Checking for recent tags as fallback..."
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LATEST_TAG" ]; then
            echo "Found latest tag: $LATEST_TAG"
            # Check if this tag was created recently (within last 5 commits)
            if git log --oneline -5 | grep -q "$LATEST_TAG"; then
              VERSION=${LATEST_TAG#v}
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "tag_name=$LATEST_TAG" >> $GITHUB_OUTPUT
              echo "‚úÖ Using latest tag as fallback: $LATEST_TAG"
            else
              echo "Latest tag is not recent enough"
              echo "should_release=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          else
            echo "No tags found at all"
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi

    - name: Check if release should proceed
      if: steps.version.outputs.should_release == 'false'
      run: |
        echo "Skipping release - no version tag found"
        exit 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install .
        pip install -e .[dev]

    - name: Run tests
      run: |
        pytest --cov=pycopancore --cov-report=xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Check code formatting with Black
      run: |
        black --check .

    - name: Lint code with Flake8
      run: |
        flake8 .

    - name: Build package
      run: |
        python -m build

    - name: Check package with twine
      run: |
        twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl

    - name: Display release info
      run: |
        echo "üöÄ Releasing version: ${{ steps.version.outputs.version }}"
        echo "üì¶ Tag name: ${{ steps.version.outputs.tag_name }}"

    - name: Verify tag exists
      run: |
        echo "üîç Verifying tag ${{ steps.version.outputs.tag_name }} exists..."
        if git tag -l | grep -q "^${{ steps.version.outputs.tag_name }}$"; then
          echo "‚úÖ Tag ${{ steps.version.outputs.tag_name }} found locally"
        else
          echo "‚ùå Tag ${{ steps.version.outputs.tag_name }} not found locally"
          echo "Available tags:"
          git tag -l | head -10
          exit 1
        fi
        
        # Show tag details
        echo "Tag details:"
        git show ${{ steps.version.outputs.tag_name }} --no-patch --format="%H %s"

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

    - name: Ensure tag is pushed to remote
      run: |
        echo "üè∑Ô∏è  Ensuring tag ${{ steps.version.outputs.tag_name }} is available for GitHub release..."
        # The tag should already be available from the merge, but let's make sure
        git fetch origin --tags
        echo "‚úÖ Tags fetched from remote"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: Release of version ${{ steps.version.outputs.version }}
        body: |
          Changes in this Release
          - Automated release notes
        draft: false
        prerelease: false
        files: dist/*
